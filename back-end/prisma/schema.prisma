// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                Int              @id @default(autoincrement())
  username          String           @unique
  password          String
  height            Int
  weight            Int
  age               Int
  gender            String
  level             Int              @default(1)
  xp                Int              @default(0)
  // strengthOverall will be calculated on backend

  workouts          Workout[] // This Workout array is used to store each user's workouts
  muscleStats       MuscleStat[] // This MuscleStat array is used to store each user's muscle stats
  bodyPartStats     BodyPartStat[] // This BodyPartStat array is used to store each user's body part stats

  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}

model Exercise{
  id           Int         @id @default(autoincrement())
  name         String
  bodyParts    String[]    // API returns multiple body parts
  targetMuscle String
  overview     String
  exerciseTips String
  createdAt    DateTime    @default(now())
}

model Workout {
  id           Int        @id @default(autoincrement())
  name         String
  bodyPart     String
  reps         Int
  weight       Int
  max          Int
  muscle       String
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  exercise     Exercise?  @relation(fields: [exerciseId], references: [id])
  exerciseId   Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
}

model MuscleStat{
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  bodyPart     String
  muscle       String
  exercise     Exercise?   @relation(fields: [exerciseId], references: [id])
  exerciseId   Int?
  max          Int
  updatedAt    DateTime    @default(now())
  createdAt    DateTime    @default(now())
}

model BodyPartStat{
  id           Int           @id @default(autoincrement())
  bodyPart     String
  muscleStats  MuscleStat[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  score        Int
  updatedAt    DateTime      @default(now())
  createdAt    DateTime      @default(now())
}
