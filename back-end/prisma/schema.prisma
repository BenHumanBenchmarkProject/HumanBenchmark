// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                Int              @id @default(autoincrement())
  username          String           @unique
  password          String
  height            Int
  weight            Int
  age               Int
  gender            String
  level             Int              @default(1)
  xp                Int              @default(0)
  overallStat       Float            @default(0)
  workouts          Workout[]        @relation("UserWorkouts")
  muscleStats       MuscleStat[]
  bodyPartStats     BodyPartStat[]
  movements         Movement[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  latitude          Float           @default(0)
  longitude         Float           @default(0)

  recommendations   FriendRecommendation[] @relation("RecommendationsFor")
  recommendedToOthers   FriendRecommendation[] @relation("RecommendedUsers")


  //prisma requires these
  friendshipsInitiated Friendship[] @relation("UserAsInitiator")
  friendshipsReceived Friendship[] @relation("UserAsReceiver")
}

model Friendship{
  userId      Int
  friendId    Int
  status      String @default("pending")

  user        User @relation("UserAsInitiator", fields: [userId], references: [id])
  friend      User @relation("UserAsReceiver", fields: [friendId], references: [id])

  @@id([userId, friendId]) //enforces uniqueness
}

model FriendRecommendation{
  id                     Int @id @default(autoincrement())
  userId                 Int
  recommendedUserId      Int
  score                  Float
  createdAt              DateTime @default(now())

  user                   User @relation("RecommendationsFor", fields: [userId], references: [id])
  recommendedUser        User @relation("RecommendedUsers", fields: [recommendedUserId], references: [id])

  @@unique([userId, recommendedUserId])
}

model Exercise { // directly replects the API
  id           Int         @id @default(autoincrement())
  name         String      @unique
  bodyParts    String[]
  targetMuscle String
  overview     String
  exerciseTips String
  createdAt    DateTime    @default(now())
  movements    Movement[]  @relation("ExerciseMovements")
  muscleStats  MuscleStat[]
}


model Workout {
  id           Int        @id @default(autoincrement())
  name         String
  isComplete   Boolean    @default(false)
  movements    Movement[] @relation("WorkoutMovements")
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  user         User       @relation("UserWorkouts", fields: [userId], references: [id])
  userId       Int
}

model Movement {
  id           Int        @id @default(autoincrement())
  name         String
  bodyPart     String
  reps         Int
  sets         Int
  weight       Int
  max          Int
  muscle       String
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  exercise     Exercise?  @relation("ExerciseMovements", fields: [exerciseId], references: [id])
  exerciseId   Int?
  workout      Workout    @relation("WorkoutMovements", fields: [workoutId], references: [id])
  workoutId    Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
}

model MuscleStat {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  bodyPart     String
  muscle       String
  exercise     Exercise?     @relation(fields: [exerciseId], references: [id])
  exerciseId   Int?
  max          Int
  bodyPartStat BodyPartStat? @relation(fields: [bodyPartStatId], references: [id])
  bodyPartStatId Int?
  updatedAt    DateTime      @default(now())
  createdAt    DateTime      @default(now())

  @@unique([userId, muscle])
}

model BodyPartStat {
  id           Int           @id @default(autoincrement())
  bodyPart     String
  muscleStats  MuscleStat[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  score        Int
  updatedAt    DateTime      @default(now())
  createdAt    DateTime      @default(now())

  @@unique([userId, bodyPart])
}
